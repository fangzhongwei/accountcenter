/**
 * Generated by Scrooge
 *   version: 4.5.0
 *   rev: 014664de600267b36809bbc85225e26aec286216
 *   built at: 20160203-205352
 */
package com.jxjxgo.account.rpc.domain

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftService, ThriftStruct,
  ThriftStructCodec, ThriftStructCodec3,
  ThriftStructFieldInfo, ThriftResponse, ThriftUtil, ToThriftService}
import com.twitter.finagle.{service => ctfs}
import com.twitter.finagle.thrift.{Protocols, ThriftClientRequest, ThriftServiceIface}
import com.twitter.util.Future
import java.nio.ByteBuffer
import java.util.Arrays
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  Builder,
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}
import scala.language.higherKinds


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
trait AccountEndpoint[+MM[_]] extends ThriftService {
  
  def createAccount(traceId: String, memberId: Long, deviceType: Int): MM[com.jxjxgo.account.rpc.domain.AccountBaseResponse]
  
  def getAccount(traceId: String, memberId: Long, deviceType: Int): MM[com.jxjxgo.account.rpc.domain.DiamondAccountResponse]
  
  def getPriceList(traceId: String, deviceType: Int): MM[com.jxjxgo.account.rpc.domain.PriceListResponse]
  
  def getChannelList(traceId: String, deviceType: Int): MM[com.jxjxgo.account.rpc.domain.ChannelListResponse]
  
  def deposit(traceId: String, request: com.jxjxgo.account.rpc.domain.DepositRequest): MM[com.jxjxgo.account.rpc.domain.DepositRequestResponse]
  
  def queryDepositOrder(traceId: String, paymentVoucherNo: String): MM[com.jxjxgo.account.rpc.domain.DepositResponse]
  
  def settle(traceId: String, request: com.jxjxgo.account.rpc.domain.SettleRequest): MM[com.jxjxgo.account.rpc.domain.AccountBaseResponse]
}



object AccountEndpoint { self =>

  case class ServiceIface(
      createAccount : com.twitter.finagle.Service[self.CreateAccount.Args, self.CreateAccount.Result],
      getAccount : com.twitter.finagle.Service[self.GetAccount.Args, self.GetAccount.Result],
      getPriceList : com.twitter.finagle.Service[self.GetPriceList.Args, self.GetPriceList.Result],
      getChannelList : com.twitter.finagle.Service[self.GetChannelList.Args, self.GetChannelList.Result],
      deposit : com.twitter.finagle.Service[self.Deposit.Args, self.Deposit.Result],
      queryDepositOrder : com.twitter.finagle.Service[self.QueryDepositOrder.Args, self.QueryDepositOrder.Result],
      settle : com.twitter.finagle.Service[self.Settle.Args, self.Settle.Result]
  ) extends BaseServiceIface

  // This is needed to support service inheritance.
  trait BaseServiceIface extends ToThriftService {
    def createAccount : com.twitter.finagle.Service[self.CreateAccount.Args, self.CreateAccount.Result]
    def getAccount : com.twitter.finagle.Service[self.GetAccount.Args, self.GetAccount.Result]
    def getPriceList : com.twitter.finagle.Service[self.GetPriceList.Args, self.GetPriceList.Result]
    def getChannelList : com.twitter.finagle.Service[self.GetChannelList.Args, self.GetChannelList.Result]
    def deposit : com.twitter.finagle.Service[self.Deposit.Args, self.Deposit.Result]
    def queryDepositOrder : com.twitter.finagle.Service[self.QueryDepositOrder.Args, self.QueryDepositOrder.Result]
    def settle : com.twitter.finagle.Service[self.Settle.Args, self.Settle.Result]

    override def toThriftService: ThriftService = new MethodIface(this)
  }

  implicit object ServiceIfaceBuilder
    extends com.twitter.finagle.thrift.ServiceIfaceBuilder[ServiceIface] {
      def newServiceIface(
        binaryService: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
        pf: TProtocolFactory = Protocols.binaryFactory(),
        stats: com.twitter.finagle.stats.StatsReceiver
      ): ServiceIface =
        new ServiceIface(
          createAccount = ThriftServiceIface(self.CreateAccount, binaryService, pf, stats),
          getAccount = ThriftServiceIface(self.GetAccount, binaryService, pf, stats),
          getPriceList = ThriftServiceIface(self.GetPriceList, binaryService, pf, stats),
          getChannelList = ThriftServiceIface(self.GetChannelList, binaryService, pf, stats),
          deposit = ThriftServiceIface(self.Deposit, binaryService, pf, stats),
          queryDepositOrder = ThriftServiceIface(self.QueryDepositOrder, binaryService, pf, stats),
          settle = ThriftServiceIface(self.Settle, binaryService, pf, stats)
      )
  }

  class MethodIface(serviceIface: BaseServiceIface)
    extends AccountEndpoint[Future] {
    private[this] val __createAccount_service =
      ThriftServiceIface.resultFilter(self.CreateAccount) andThen serviceIface.createAccount
    def createAccount(traceId: String, memberId: Long, deviceType: Int): Future[com.jxjxgo.account.rpc.domain.AccountBaseResponse] =
      __createAccount_service(self.CreateAccount.Args(traceId, memberId, deviceType))
    private[this] val __getAccount_service =
      ThriftServiceIface.resultFilter(self.GetAccount) andThen serviceIface.getAccount
    def getAccount(traceId: String, memberId: Long, deviceType: Int): Future[com.jxjxgo.account.rpc.domain.DiamondAccountResponse] =
      __getAccount_service(self.GetAccount.Args(traceId, memberId, deviceType))
    private[this] val __getPriceList_service =
      ThriftServiceIface.resultFilter(self.GetPriceList) andThen serviceIface.getPriceList
    def getPriceList(traceId: String, deviceType: Int): Future[com.jxjxgo.account.rpc.domain.PriceListResponse] =
      __getPriceList_service(self.GetPriceList.Args(traceId, deviceType))
    private[this] val __getChannelList_service =
      ThriftServiceIface.resultFilter(self.GetChannelList) andThen serviceIface.getChannelList
    def getChannelList(traceId: String, deviceType: Int): Future[com.jxjxgo.account.rpc.domain.ChannelListResponse] =
      __getChannelList_service(self.GetChannelList.Args(traceId, deviceType))
    private[this] val __deposit_service =
      ThriftServiceIface.resultFilter(self.Deposit) andThen serviceIface.deposit
    def deposit(traceId: String, request: com.jxjxgo.account.rpc.domain.DepositRequest): Future[com.jxjxgo.account.rpc.domain.DepositRequestResponse] =
      __deposit_service(self.Deposit.Args(traceId, request))
    private[this] val __queryDepositOrder_service =
      ThriftServiceIface.resultFilter(self.QueryDepositOrder) andThen serviceIface.queryDepositOrder
    def queryDepositOrder(traceId: String, paymentVoucherNo: String): Future[com.jxjxgo.account.rpc.domain.DepositResponse] =
      __queryDepositOrder_service(self.QueryDepositOrder.Args(traceId, paymentVoucherNo))
    private[this] val __settle_service =
      ThriftServiceIface.resultFilter(self.Settle) andThen serviceIface.settle
    def settle(traceId: String, request: com.jxjxgo.account.rpc.domain.SettleRequest): Future[com.jxjxgo.account.rpc.domain.AccountBaseResponse] =
      __settle_service(self.Settle.Args(traceId, request))
  }

  implicit object MethodIfaceBuilder
    extends com.twitter.finagle.thrift.MethodIfaceBuilder[ServiceIface, AccountEndpoint[Future]] {
    def newMethodIface(serviceIface: ServiceIface): AccountEndpoint[Future] =
      new MethodIface(serviceIface)
  }

  object CreateAccount extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("createAccount_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val MemberIdField = new TField("memberId", TType.I64, 2)
      val MemberIdFieldManifest = implicitly[Manifest[Long]]
      val DeviceTypeField = new TField("deviceType", TType.I32, 3)
      val DeviceTypeFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          MemberIdField,
          false,
          false,
          MemberIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          DeviceTypeField,
          false,
          false,
          DeviceTypeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          memberId =
            {
              val field = original.memberId
              field
            },
          deviceType =
            {
              val field = original.deviceType
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var memberId: Long = 0L
        var deviceType: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I64 =>
                    memberId = readMemberIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I32 =>
                    deviceType = readDeviceTypeValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          memberId,
          deviceType,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        memberId: Long,
        deviceType: Int
      ): Args =
        new Args(
          traceId,
          memberId,
          deviceType
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product3[String, Long, Int]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readMemberIdValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeMemberIdField(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(MemberIdField)
        writeMemberIdValue(memberId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeMemberIdValue(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(memberId_item)
      }
    
      @inline private def readDeviceTypeValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeDeviceTypeField(deviceType_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(DeviceTypeField)
        writeDeviceTypeValue(deviceType_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeDeviceTypeValue(deviceType_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(deviceType_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val memberId: Long,
        val deviceType: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product3[String, Long, Int]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        memberId: Long,
        deviceType: Int
      ) = this(
        traceId,
        memberId,
        deviceType,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = memberId
      def _3 = deviceType
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        writeMemberIdField(memberId, _oprot)
        writeDeviceTypeField(deviceType, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        memberId: Long = this.memberId,
        deviceType: Int = this.deviceType,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          memberId,
          deviceType,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 3
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.memberId
        case 2 => this.deviceType
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.account.rpc.domain.AccountBaseResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("createAccount_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.account.rpc.domain.AccountBaseResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.account.rpc.domain.AccountBaseResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.account.rpc.domain.AccountBaseResponse = {
        com.jxjxgo.account.rpc.domain.AccountBaseResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.account.rpc.domain.AccountBaseResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.account.rpc.domain.AccountBaseResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.account.rpc.domain.AccountBaseResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.account.rpc.domain.AccountBaseResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "createAccount"
    val serviceName = "AccountEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val createAccount$args = CreateAccount.Args
  type createAccount$args = CreateAccount.Args

  val createAccount$result = CreateAccount.Result
  type createAccount$result = CreateAccount.Result

  object GetAccount extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getAccount_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val MemberIdField = new TField("memberId", TType.I64, 2)
      val MemberIdFieldManifest = implicitly[Manifest[Long]]
      val DeviceTypeField = new TField("deviceType", TType.I32, 3)
      val DeviceTypeFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          MemberIdField,
          false,
          false,
          MemberIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          DeviceTypeField,
          false,
          false,
          DeviceTypeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          memberId =
            {
              val field = original.memberId
              field
            },
          deviceType =
            {
              val field = original.deviceType
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var memberId: Long = 0L
        var deviceType: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I64 =>
                    memberId = readMemberIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I64
                    throw new TProtocolException(
                      "Received wrong type for field 'memberId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I32 =>
                    deviceType = readDeviceTypeValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          memberId,
          deviceType,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        memberId: Long,
        deviceType: Int
      ): Args =
        new Args(
          traceId,
          memberId,
          deviceType
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product3[String, Long, Int]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readMemberIdValue(_iprot: TProtocol): Long = {
        _iprot.readI64()
      }
    
      @inline private def writeMemberIdField(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(MemberIdField)
        writeMemberIdValue(memberId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeMemberIdValue(memberId_item: Long, _oprot: TProtocol): Unit = {
        _oprot.writeI64(memberId_item)
      }
    
      @inline private def readDeviceTypeValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeDeviceTypeField(deviceType_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(DeviceTypeField)
        writeDeviceTypeValue(deviceType_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeDeviceTypeValue(deviceType_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(deviceType_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val memberId: Long,
        val deviceType: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product3[String, Long, Int]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        memberId: Long,
        deviceType: Int
      ) = this(
        traceId,
        memberId,
        deviceType,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = memberId
      def _3 = deviceType
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        writeMemberIdField(memberId, _oprot)
        writeDeviceTypeField(deviceType, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        memberId: Long = this.memberId,
        deviceType: Int = this.deviceType,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          memberId,
          deviceType,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 3
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.memberId
        case 2 => this.deviceType
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.account.rpc.domain.DiamondAccountResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getAccount_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.account.rpc.domain.DiamondAccountResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.account.rpc.domain.DiamondAccountResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DiamondAccountResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DiamondAccountResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.account.rpc.domain.DiamondAccountResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.account.rpc.domain.DiamondAccountResponse = {
        com.jxjxgo.account.rpc.domain.DiamondAccountResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.account.rpc.domain.DiamondAccountResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.account.rpc.domain.DiamondAccountResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DiamondAccountResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.account.rpc.domain.DiamondAccountResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.account.rpc.domain.DiamondAccountResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DiamondAccountResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.account.rpc.domain.DiamondAccountResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DiamondAccountResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.account.rpc.domain.DiamondAccountResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "getAccount"
    val serviceName = "AccountEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getAccount$args = GetAccount.Args
  type getAccount$args = GetAccount.Args

  val getAccount$result = GetAccount.Result
  type getAccount$result = GetAccount.Result

  object GetPriceList extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getPriceList_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val DeviceTypeField = new TField("deviceType", TType.I32, 2)
      val DeviceTypeFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          DeviceTypeField,
          false,
          false,
          DeviceTypeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          deviceType =
            {
              val field = original.deviceType
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var deviceType: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.I32 =>
                    deviceType = readDeviceTypeValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          deviceType,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        deviceType: Int
      ): Args =
        new Args(
          traceId,
          deviceType
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, Int]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readDeviceTypeValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeDeviceTypeField(deviceType_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(DeviceTypeField)
        writeDeviceTypeValue(deviceType_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeDeviceTypeValue(deviceType_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(deviceType_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val deviceType: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, Int]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        deviceType: Int
      ) = this(
        traceId,
        deviceType,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = deviceType
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        writeDeviceTypeField(deviceType, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        deviceType: Int = this.deviceType,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          deviceType,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.deviceType
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.account.rpc.domain.PriceListResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getPriceList_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.account.rpc.domain.PriceListResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.account.rpc.domain.PriceListResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.PriceListResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.PriceListResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.account.rpc.domain.PriceListResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.account.rpc.domain.PriceListResponse = {
        com.jxjxgo.account.rpc.domain.PriceListResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.account.rpc.domain.PriceListResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.account.rpc.domain.PriceListResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.PriceListResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.account.rpc.domain.PriceListResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.account.rpc.domain.PriceListResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.PriceListResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.account.rpc.domain.PriceListResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.PriceListResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.account.rpc.domain.PriceListResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "getPriceList"
    val serviceName = "AccountEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getPriceList$args = GetPriceList.Args
  type getPriceList$args = GetPriceList.Args

  val getPriceList$result = GetPriceList.Result
  type getPriceList$result = GetPriceList.Result

  object GetChannelList extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getChannelList_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val DeviceTypeField = new TField("deviceType", TType.I32, 3)
      val DeviceTypeFieldManifest = implicitly[Manifest[Int]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          DeviceTypeField,
          false,
          false,
          DeviceTypeFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          deviceType =
            {
              val field = original.deviceType
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var deviceType: Int = 0
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 3 =>
                _field.`type` match {
                  case TType.I32 =>
                    deviceType = readDeviceTypeValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.I32
                    throw new TProtocolException(
                      "Received wrong type for field 'deviceType' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          deviceType,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        deviceType: Int
      ): Args =
        new Args(
          traceId,
          deviceType
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, Int]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readDeviceTypeValue(_iprot: TProtocol): Int = {
        _iprot.readI32()
      }
    
      @inline private def writeDeviceTypeField(deviceType_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(DeviceTypeField)
        writeDeviceTypeValue(deviceType_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeDeviceTypeValue(deviceType_item: Int, _oprot: TProtocol): Unit = {
        _oprot.writeI32(deviceType_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val deviceType: Int,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, Int]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        deviceType: Int
      ) = this(
        traceId,
        deviceType,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = deviceType
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        writeDeviceTypeField(deviceType, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        deviceType: Int = this.deviceType,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          deviceType,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.deviceType
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.account.rpc.domain.ChannelListResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("getChannelList_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.account.rpc.domain.ChannelListResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.account.rpc.domain.ChannelListResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.ChannelListResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.ChannelListResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.account.rpc.domain.ChannelListResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.account.rpc.domain.ChannelListResponse = {
        com.jxjxgo.account.rpc.domain.ChannelListResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.account.rpc.domain.ChannelListResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.account.rpc.domain.ChannelListResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.ChannelListResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.account.rpc.domain.ChannelListResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.account.rpc.domain.ChannelListResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.ChannelListResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.account.rpc.domain.ChannelListResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.ChannelListResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.account.rpc.domain.ChannelListResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "getChannelList"
    val serviceName = "AccountEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val getChannelList$args = GetChannelList.Args
  type getChannelList$args = GetChannelList.Args

  val getChannelList$result = GetChannelList.Result
  type getChannelList$result = GetChannelList.Result

  object Deposit extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("deposit_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val RequestField = new TField("request", TType.STRUCT, 2)
      val RequestFieldManifest = implicitly[Manifest[com.jxjxgo.account.rpc.domain.DepositRequest]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          RequestField,
          false,
          false,
          RequestFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          request =
            {
              val field = original.request
              com.jxjxgo.account.rpc.domain.DepositRequest.withoutPassthroughFields(field)
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var request: com.jxjxgo.account.rpc.domain.DepositRequest = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    request = readRequestValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'request' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          request,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        request: com.jxjxgo.account.rpc.domain.DepositRequest
      ): Args =
        new Args(
          traceId,
          request
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, com.jxjxgo.account.rpc.domain.DepositRequest]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readRequestValue(_iprot: TProtocol): com.jxjxgo.account.rpc.domain.DepositRequest = {
        com.jxjxgo.account.rpc.domain.DepositRequest.decode(_iprot)
      }
    
      @inline private def writeRequestField(request_item: com.jxjxgo.account.rpc.domain.DepositRequest, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(RequestField)
        writeRequestValue(request_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeRequestValue(request_item: com.jxjxgo.account.rpc.domain.DepositRequest, _oprot: TProtocol): Unit = {
        request_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val request: com.jxjxgo.account.rpc.domain.DepositRequest,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, com.jxjxgo.account.rpc.domain.DepositRequest]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        request: com.jxjxgo.account.rpc.domain.DepositRequest
      ) = this(
        traceId,
        request,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = request
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        if (request ne null) writeRequestField(request, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        request: com.jxjxgo.account.rpc.domain.DepositRequest = this.request,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          request,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.request
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.account.rpc.domain.DepositRequestResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("deposit_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.account.rpc.domain.DepositRequestResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.account.rpc.domain.DepositRequestResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositRequestResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositRequestResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositRequestResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.account.rpc.domain.DepositRequestResponse = {
        com.jxjxgo.account.rpc.domain.DepositRequestResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.account.rpc.domain.DepositRequestResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.account.rpc.domain.DepositRequestResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositRequestResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.account.rpc.domain.DepositRequestResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.account.rpc.domain.DepositRequestResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositRequestResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.account.rpc.domain.DepositRequestResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositRequestResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.account.rpc.domain.DepositRequestResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "deposit"
    val serviceName = "AccountEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val deposit$args = Deposit.Args
  type deposit$args = Deposit.Args

  val deposit$result = Deposit.Result
  type deposit$result = Deposit.Result

  object QueryDepositOrder extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("queryDepositOrder_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val PaymentVoucherNoField = new TField("paymentVoucherNo", TType.STRING, 2)
      val PaymentVoucherNoFieldManifest = implicitly[Manifest[String]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          PaymentVoucherNoField,
          false,
          false,
          PaymentVoucherNoFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          paymentVoucherNo =
            {
              val field = original.paymentVoucherNo
              field
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var paymentVoucherNo: String = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRING =>
                    paymentVoucherNo = readPaymentVoucherNoValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'paymentVoucherNo' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          paymentVoucherNo,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        paymentVoucherNo: String
      ): Args =
        new Args(
          traceId,
          paymentVoucherNo
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, String]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readPaymentVoucherNoValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writePaymentVoucherNoField(paymentVoucherNo_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(PaymentVoucherNoField)
        writePaymentVoucherNoValue(paymentVoucherNo_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writePaymentVoucherNoValue(paymentVoucherNo_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(paymentVoucherNo_item)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val paymentVoucherNo: String,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, String]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        paymentVoucherNo: String
      ) = this(
        traceId,
        paymentVoucherNo,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = paymentVoucherNo
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        if (paymentVoucherNo ne null) writePaymentVoucherNoField(paymentVoucherNo, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        paymentVoucherNo: String = this.paymentVoucherNo,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          paymentVoucherNo,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.paymentVoucherNo
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.account.rpc.domain.DepositResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("queryDepositOrder_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.account.rpc.domain.DepositResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.account.rpc.domain.DepositResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.account.rpc.domain.DepositResponse = {
        com.jxjxgo.account.rpc.domain.DepositResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.account.rpc.domain.DepositResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.account.rpc.domain.DepositResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.account.rpc.domain.DepositResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.account.rpc.domain.DepositResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.account.rpc.domain.DepositResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.DepositResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.account.rpc.domain.DepositResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "queryDepositOrder"
    val serviceName = "AccountEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val queryDepositOrder$args = QueryDepositOrder.Args
  type queryDepositOrder$args = QueryDepositOrder.Args

  val queryDepositOrder$result = QueryDepositOrder.Result
  type queryDepositOrder$result = QueryDepositOrder.Result

  object Settle extends com.twitter.scrooge.ThriftMethod {
    
    object Args extends ThriftStructCodec3[Args] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("settle_args")
      val TraceIdField = new TField("traceId", TType.STRING, 1)
      val TraceIdFieldManifest = implicitly[Manifest[String]]
      val RequestField = new TField("request", TType.STRUCT, 2)
      val RequestFieldManifest = implicitly[Manifest[com.jxjxgo.account.rpc.domain.SettleRequest]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          TraceIdField,
          false,
          false,
          TraceIdFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        ),
        new ThriftStructFieldInfo(
          RequestField,
          false,
          false,
          RequestFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Args): Unit = {
      }
    
      def withoutPassthroughFields(original: Args): Args =
        new Args(
          traceId =
            {
              val field = original.traceId
              field
            },
          request =
            {
              val field = original.request
              com.jxjxgo.account.rpc.domain.SettleRequest.withoutPassthroughFields(field)
            }
        )
    
      override def encode(_item: Args, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Args = {
        var traceId: String = null
        var request: com.jxjxgo.account.rpc.domain.SettleRequest = null
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 1 =>
                _field.`type` match {
                  case TType.STRING =>
                    traceId = readTraceIdValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRING
                    throw new TProtocolException(
                      "Received wrong type for field 'traceId' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case 2 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    request = readRequestValue(_iprot)
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'request' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Args(
          traceId,
          request,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        traceId: String,
        request: com.jxjxgo.account.rpc.domain.SettleRequest
      ): Args =
        new Args(
          traceId,
          request
        )
    
      def unapply(_item: Args): _root_.scala.Option[scala.Product2[String, com.jxjxgo.account.rpc.domain.SettleRequest]] = _root_.scala.Some(_item)
    
    
      @inline private def readTraceIdValue(_iprot: TProtocol): String = {
        _iprot.readString()
      }
    
      @inline private def writeTraceIdField(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(TraceIdField)
        writeTraceIdValue(traceId_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeTraceIdValue(traceId_item: String, _oprot: TProtocol): Unit = {
        _oprot.writeString(traceId_item)
      }
    
      @inline private def readRequestValue(_iprot: TProtocol): com.jxjxgo.account.rpc.domain.SettleRequest = {
        com.jxjxgo.account.rpc.domain.SettleRequest.decode(_iprot)
      }
    
      @inline private def writeRequestField(request_item: com.jxjxgo.account.rpc.domain.SettleRequest, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(RequestField)
        writeRequestValue(request_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeRequestValue(request_item: com.jxjxgo.account.rpc.domain.SettleRequest, _oprot: TProtocol): Unit = {
        request_item.write(_oprot)
      }
    
    
    }
    
    class Args(
        val traceId: String,
        val request: com.jxjxgo.account.rpc.domain.SettleRequest,
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftStruct
      with scala.Product2[String, com.jxjxgo.account.rpc.domain.SettleRequest]
      with java.io.Serializable
    {
      import Args._
      def this(
        traceId: String,
        request: com.jxjxgo.account.rpc.domain.SettleRequest
      ) = this(
        traceId,
        request,
        Map.empty
      )
    
      def _1 = traceId
      def _2 = request
    
    
    
      override def write(_oprot: TProtocol): Unit = {
        Args.validate(this)
        _oprot.writeStructBegin(Struct)
        if (traceId ne null) writeTraceIdField(traceId, _oprot)
        if (request ne null) writeRequestField(request, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        traceId: String = this.traceId,
        request: com.jxjxgo.account.rpc.domain.SettleRequest = this.request,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Args =
        new Args(
          traceId,
          request,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Args]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Args]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 2
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.traceId
        case 1 => this.request
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Args"
    }

    type SuccessType = com.jxjxgo.account.rpc.domain.AccountBaseResponse
    
    object Result extends ThriftStructCodec3[Result] {
      private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
      val Struct = new TStruct("settle_result")
      val SuccessField = new TField("success", TType.STRUCT, 0)
      val SuccessFieldManifest = implicitly[Manifest[com.jxjxgo.account.rpc.domain.AccountBaseResponse]]
    
      /**
       * Field information in declaration order.
       */
      lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
        new ThriftStructFieldInfo(
          SuccessField,
          true,
          false,
          SuccessFieldManifest,
          _root_.scala.None,
          _root_.scala.None,
          immutable$Map.empty[String, String],
          immutable$Map.empty[String, String]
        )
      )
    
      lazy val structAnnotations: immutable$Map[String, String] =
        immutable$Map.empty[String, String]
    
      /**
       * Checks that all required fields are non-null.
       */
      def validate(_item: Result): Unit = {
      }
    
      def withoutPassthroughFields(original: Result): Result =
        new Result(
          success =
            {
              val field = original.success
              field.map { field =>
                com.jxjxgo.account.rpc.domain.AccountBaseResponse.withoutPassthroughFields(field)
              }
            }
        )
    
      override def encode(_item: Result, _oproto: TProtocol): Unit = {
        _item.write(_oproto)
      }
    
      override def decode(_iprot: TProtocol): Result = {
        var success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = _root_.scala.None
        var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
        var _done = false
    
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 =>
                _field.`type` match {
                  case TType.STRUCT =>
                    success = _root_.scala.Some(readSuccessValue(_iprot))
                  case _actualType =>
                    val _expectedType = TType.STRUCT
                    throw new TProtocolException(
                      "Received wrong type for field 'success' (expected=%s, actual=%s).".format(
                        ttypeToString(_expectedType),
                        ttypeToString(_actualType)
                      )
                    )
                }
              case _ =>
                if (_passthroughFields == null)
                  _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
                _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
    
        new Result(
          success,
          if (_passthroughFields == null)
            NoPassthroughFields
          else
            _passthroughFields.result()
        )
      }
    
      def apply(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = _root_.scala.None
      ): Result =
        new Result(
          success
        )
    
      def unapply(_item: Result): _root_.scala.Option[_root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse]] = _root_.scala.Some(_item.success)
    
    
      @inline private def readSuccessValue(_iprot: TProtocol): com.jxjxgo.account.rpc.domain.AccountBaseResponse = {
        com.jxjxgo.account.rpc.domain.AccountBaseResponse.decode(_iprot)
      }
    
      @inline private def writeSuccessField(success_item: com.jxjxgo.account.rpc.domain.AccountBaseResponse, _oprot: TProtocol): Unit = {
        _oprot.writeFieldBegin(SuccessField)
        writeSuccessValue(success_item, _oprot)
        _oprot.writeFieldEnd()
      }
    
      @inline private def writeSuccessValue(success_item: com.jxjxgo.account.rpc.domain.AccountBaseResponse, _oprot: TProtocol): Unit = {
        success_item.write(_oprot)
      }
    
    
    }
    
    class Result(
        val success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse],
        val _passthroughFields: immutable$Map[Short, TFieldBlob])
      extends ThriftResponse[com.jxjxgo.account.rpc.domain.AccountBaseResponse] with ThriftStruct
      with scala.Product1[Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse]]
      with java.io.Serializable
    {
      import Result._
      def this(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = _root_.scala.None
      ) = this(
        success,
        Map.empty
      )
    
      def _1 = success
    
      def successField: Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = success
      def exceptionFields: Iterable[Option[com.twitter.scrooge.ThriftException]] = Seq()
    
    
      override def write(_oprot: TProtocol): Unit = {
        Result.validate(this)
        _oprot.writeStructBegin(Struct)
        if (success.isDefined) writeSuccessField(success.get, _oprot)
        if (_passthroughFields.nonEmpty) {
          _passthroughFields.values.foreach { _.write(_oprot) }
        }
        _oprot.writeFieldStop()
        _oprot.writeStructEnd()
      }
    
      def copy(
        success: _root_.scala.Option[com.jxjxgo.account.rpc.domain.AccountBaseResponse] = this.success,
        _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
      ): Result =
        new Result(
          success,
          _passthroughFields
        )
    
      override def canEqual(other: Any): Boolean = other.isInstanceOf[Result]
    
      override def equals(other: Any): Boolean =
        canEqual(other) &&
          _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
          _passthroughFields == other.asInstanceOf[Result]._passthroughFields
    
      override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
    
      override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
    
    
      override def productArity: Int = 1
    
      override def productElement(n: Int): Any = n match {
        case 0 => this.success
        case _ => throw new IndexOutOfBoundsException(n.toString)
      }
    
      override def productPrefix: String = "Result"
    }

    type FunctionType = Function1[Args,Future[com.jxjxgo.account.rpc.domain.AccountBaseResponse]]
    type ServiceType = com.twitter.finagle.Service[Args, Result]

    private[this] val toResult = (res: SuccessType) => Result(Some(res))

    def functionToService(f: FunctionType): ServiceType = {
      com.twitter.finagle.Service.mk { args: Args =>
        f(args).map(toResult)
      }
    }

    def serviceToFunction(svc: ServiceType): FunctionType = { args: Args =>
      ThriftServiceIface.resultFilter(this).andThen(svc).apply(args)
    }

    val name = "settle"
    val serviceName = "AccountEndpoint"
    val argsCodec = Args
    val responseCodec = Result
    val oneway = false
  }

  // Compatibility aliases.
  val settle$args = Settle.Args
  type settle$args = Settle.Args

  val settle$result = Settle.Result
  type settle$result = Settle.Result


  trait FutureIface extends AccountEndpoint[Future] {
    
    def createAccount(traceId: String, memberId: Long, deviceType: Int): Future[com.jxjxgo.account.rpc.domain.AccountBaseResponse]
    
    def getAccount(traceId: String, memberId: Long, deviceType: Int): Future[com.jxjxgo.account.rpc.domain.DiamondAccountResponse]
    
    def getPriceList(traceId: String, deviceType: Int): Future[com.jxjxgo.account.rpc.domain.PriceListResponse]
    
    def getChannelList(traceId: String, deviceType: Int): Future[com.jxjxgo.account.rpc.domain.ChannelListResponse]
    
    def deposit(traceId: String, request: com.jxjxgo.account.rpc.domain.DepositRequest): Future[com.jxjxgo.account.rpc.domain.DepositRequestResponse]
    
    def queryDepositOrder(traceId: String, paymentVoucherNo: String): Future[com.jxjxgo.account.rpc.domain.DepositResponse]
    
    def settle(traceId: String, request: com.jxjxgo.account.rpc.domain.SettleRequest): Future[com.jxjxgo.account.rpc.domain.AccountBaseResponse]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory = Protocols.binaryFactory(),
      serviceName: String = "AccountEndpoint",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver,
      responseClassifier: ctfs.ResponseClassifier = ctfs.ResponseClassifier.Default)
    extends AccountEndpoint$FinagleClient(
      service,
      protocolFactory,
      serviceName,
      stats,
      responseClassifier)
    with FutureIface {

    def this(
      service: com.twitter.finagle.Service[ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory,
      serviceName: String,
      stats: com.twitter.finagle.stats.StatsReceiver
    ) = this(service, protocolFactory, serviceName, stats, ctfs.ResponseClassifier.Default)
  }

  class FinagledService(
      iface: FutureIface,
      protocolFactory: TProtocolFactory)
    extends AccountEndpoint$FinagleService(
      iface,
      protocolFactory)
}