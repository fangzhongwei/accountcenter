// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `account.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RpcAccount;

public abstract class _AccountEndpointDisp extends Ice.ObjectImpl implements AccountEndpoint
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RpcAccount::AccountEndpoint"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    public final AccountBaseResponse createAccount(String traceId, long memberId)
    {
        return createAccount(traceId, memberId, null);
    }

    public final DepositRequestResponse deposit(String traceId, DepositRequest request)
    {
        return deposit(traceId, request, null);
    }

    public final DiamondAccountResponse getAccount(String traceId, long memberId)
    {
        return getAccount(traceId, memberId, null);
    }

    public final ChannelListResponse getChannelList(String traceId)
    {
        return getChannelList(traceId, null);
    }

    public final PriceListResponse getPriceList(String traceId)
    {
        return getPriceList(traceId, null);
    }

    public final DepositResponse queryDepositOrder(String traceId, String paymentVoucherNo)
    {
        return queryDepositOrder(traceId, paymentVoucherNo, null);
    }

    public final AccountBaseResponse settle(String traceId, SettleRequest request)
    {
        return settle(traceId, request, null);
    }

    public static Ice.DispatchStatus ___createAccount(AccountEndpoint __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String traceId;
        long memberId;
        traceId = __is.readString();
        memberId = __is.readLong();
        __inS.endReadParams();
        AccountBaseResponse __ret = __obj.createAccount(traceId, memberId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getAccount(AccountEndpoint __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String traceId;
        long memberId;
        traceId = __is.readString();
        memberId = __is.readLong();
        __inS.endReadParams();
        DiamondAccountResponse __ret = __obj.getAccount(traceId, memberId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getPriceList(AccountEndpoint __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String traceId;
        traceId = __is.readString();
        __inS.endReadParams();
        PriceListResponse __ret = __obj.getPriceList(traceId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___getChannelList(AccountEndpoint __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String traceId;
        traceId = __is.readString();
        __inS.endReadParams();
        ChannelListResponse __ret = __obj.getChannelList(traceId, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___deposit(AccountEndpoint __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String traceId;
        DepositRequestHolder request = new DepositRequestHolder();
        traceId = __is.readString();
        __is.readObject(request);
        __is.readPendingObjects();
        __inS.endReadParams();
        DepositRequestResponse __ret = __obj.deposit(traceId, request.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___queryDepositOrder(AccountEndpoint __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String traceId;
        String paymentVoucherNo;
        traceId = __is.readString();
        paymentVoucherNo = __is.readString();
        __inS.endReadParams();
        DepositResponse __ret = __obj.queryDepositOrder(traceId, paymentVoucherNo, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___settle(AccountEndpoint __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String traceId;
        SettleRequestHolder request = new SettleRequestHolder();
        traceId = __is.readString();
        __is.readObject(request);
        __is.readPendingObjects();
        __inS.endReadParams();
        AccountBaseResponse __ret = __obj.settle(traceId, request.value, __current);
        IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
        __os.writeObject(__ret);
        __os.writePendingObjects();
        __inS.__endWriteParams(true);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "createAccount",
        "deposit",
        "getAccount",
        "getChannelList",
        "getPriceList",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryDepositOrder",
        "settle"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___createAccount(this, in, __current);
            }
            case 1:
            {
                return ___deposit(this, in, __current);
            }
            case 2:
            {
                return ___getAccount(this, in, __current);
            }
            case 3:
            {
                return ___getChannelList(this, in, __current);
            }
            case 4:
            {
                return ___getPriceList(this, in, __current);
            }
            case 5:
            {
                return ___ice_id(this, in, __current);
            }
            case 6:
            {
                return ___ice_ids(this, in, __current);
            }
            case 7:
            {
                return ___ice_isA(this, in, __current);
            }
            case 8:
            {
                return ___ice_ping(this, in, __current);
            }
            case 9:
            {
                return ___queryDepositOrder(this, in, __current);
            }
            case 10:
            {
                return ___settle(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
