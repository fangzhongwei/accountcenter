// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `account.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package RpcAccount;

/**
 * Provides type-specific helper functions.
 **/
public final class AccountEndpointPrxHelper extends Ice.ObjectPrxHelperBase implements AccountEndpointPrx
{
    private static final String __createAccount_name = "createAccount";

    public AccountBaseResponse createAccount(String traceId, long memberId)
    {
        return createAccount(traceId, memberId, null, false);
    }

    public AccountBaseResponse createAccount(String traceId, long memberId, java.util.Map<String, String> __ctx)
    {
        return createAccount(traceId, memberId, __ctx, true);
    }

    private AccountBaseResponse createAccount(String traceId, long memberId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__createAccount_name);
        return end_createAccount(begin_createAccount(traceId, memberId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createAccount(String traceId, long memberId)
    {
        return begin_createAccount(traceId, memberId, null, false, false, null);
    }

    public Ice.AsyncResult begin_createAccount(String traceId, long memberId, java.util.Map<String, String> __ctx)
    {
        return begin_createAccount(traceId, memberId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createAccount(String traceId, long memberId, Ice.Callback __cb)
    {
        return begin_createAccount(traceId, memberId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createAccount(String traceId, long memberId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createAccount(traceId, memberId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createAccount(String traceId, long memberId, Callback_AccountEndpoint_createAccount __cb)
    {
        return begin_createAccount(traceId, memberId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createAccount(String traceId, long memberId, java.util.Map<String, String> __ctx, Callback_AccountEndpoint_createAccount __cb)
    {
        return begin_createAccount(traceId, memberId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createAccount(String traceId, 
                                               long memberId, 
                                               IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createAccount(traceId, memberId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createAccount(String traceId, 
                                               long memberId, 
                                               IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createAccount(traceId, memberId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createAccount(String traceId, 
                                               long memberId, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createAccount(traceId, memberId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createAccount(String traceId, 
                                               long memberId, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createAccount(traceId, memberId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createAccount(String traceId, 
                                                long memberId, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createAccount(traceId, memberId, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<AccountBaseResponse>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               AccountEndpointPrxHelper.__createAccount_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_createAccount(String traceId, 
                                                long memberId, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createAccount_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createAccount_name, __cb);
        try
        {
            __result.prepare(__createAccount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(traceId);
            __os.writeLong(memberId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public AccountBaseResponse end_createAccount(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createAccount_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            AccountBaseResponseHolder __ret = new AccountBaseResponseHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createAccount_completed(Ice.TwowayCallbackArg1<AccountBaseResponse> __cb, Ice.AsyncResult __result)
    {
        AccountEndpointPrx __proxy = (AccountEndpointPrx)__result.getProxy();
        AccountBaseResponse __ret = null;
        try
        {
            __ret = __proxy.end_createAccount(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __deposit_name = "deposit";

    public DepositRequestResponse deposit(String traceId, DepositRequest request)
    {
        return deposit(traceId, request, null, false);
    }

    public DepositRequestResponse deposit(String traceId, DepositRequest request, java.util.Map<String, String> __ctx)
    {
        return deposit(traceId, request, __ctx, true);
    }

    private DepositRequestResponse deposit(String traceId, DepositRequest request, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__deposit_name);
        return end_deposit(begin_deposit(traceId, request, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_deposit(String traceId, DepositRequest request)
    {
        return begin_deposit(traceId, request, null, false, false, null);
    }

    public Ice.AsyncResult begin_deposit(String traceId, DepositRequest request, java.util.Map<String, String> __ctx)
    {
        return begin_deposit(traceId, request, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_deposit(String traceId, DepositRequest request, Ice.Callback __cb)
    {
        return begin_deposit(traceId, request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deposit(String traceId, DepositRequest request, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deposit(traceId, request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deposit(String traceId, DepositRequest request, Callback_AccountEndpoint_deposit __cb)
    {
        return begin_deposit(traceId, request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deposit(String traceId, DepositRequest request, java.util.Map<String, String> __ctx, Callback_AccountEndpoint_deposit __cb)
    {
        return begin_deposit(traceId, request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deposit(String traceId, 
                                         DepositRequest request, 
                                         IceInternal.Functional_GenericCallback1<DepositRequestResponse> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deposit(traceId, request, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deposit(String traceId, 
                                         DepositRequest request, 
                                         IceInternal.Functional_GenericCallback1<DepositRequestResponse> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deposit(traceId, request, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_deposit(String traceId, 
                                         DepositRequest request, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<DepositRequestResponse> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deposit(traceId, request, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deposit(String traceId, 
                                         DepositRequest request, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_GenericCallback1<DepositRequestResponse> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deposit(traceId, request, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_deposit(String traceId, 
                                          DepositRequest request, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_GenericCallback1<DepositRequestResponse> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deposit(traceId, request, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackArg1<RpcAccount.DepositRequestResponse>(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         AccountEndpointPrxHelper.__deposit_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_deposit(String traceId, 
                                          DepositRequest request, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deposit_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__deposit_name, __cb);
        try
        {
            __result.prepare(__deposit_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(traceId);
            __os.writeObject(request);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public DepositRequestResponse end_deposit(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __deposit_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            DepositRequestResponseHolder __ret = new DepositRequestResponseHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __deposit_completed(Ice.TwowayCallbackArg1<DepositRequestResponse> __cb, Ice.AsyncResult __result)
    {
        AccountEndpointPrx __proxy = (AccountEndpointPrx)__result.getProxy();
        DepositRequestResponse __ret = null;
        try
        {
            __ret = __proxy.end_deposit(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getAccount_name = "getAccount";

    public DiamondAccountResponse getAccount(String traceId, long memberId)
    {
        return getAccount(traceId, memberId, null, false);
    }

    public DiamondAccountResponse getAccount(String traceId, long memberId, java.util.Map<String, String> __ctx)
    {
        return getAccount(traceId, memberId, __ctx, true);
    }

    private DiamondAccountResponse getAccount(String traceId, long memberId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getAccount_name);
        return end_getAccount(begin_getAccount(traceId, memberId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getAccount(String traceId, long memberId)
    {
        return begin_getAccount(traceId, memberId, null, false, false, null);
    }

    public Ice.AsyncResult begin_getAccount(String traceId, long memberId, java.util.Map<String, String> __ctx)
    {
        return begin_getAccount(traceId, memberId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getAccount(String traceId, long memberId, Ice.Callback __cb)
    {
        return begin_getAccount(traceId, memberId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAccount(String traceId, long memberId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAccount(traceId, memberId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAccount(String traceId, long memberId, Callback_AccountEndpoint_getAccount __cb)
    {
        return begin_getAccount(traceId, memberId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAccount(String traceId, long memberId, java.util.Map<String, String> __ctx, Callback_AccountEndpoint_getAccount __cb)
    {
        return begin_getAccount(traceId, memberId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAccount(String traceId, 
                                            long memberId, 
                                            IceInternal.Functional_GenericCallback1<DiamondAccountResponse> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAccount(traceId, memberId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAccount(String traceId, 
                                            long memberId, 
                                            IceInternal.Functional_GenericCallback1<DiamondAccountResponse> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAccount(traceId, memberId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getAccount(String traceId, 
                                            long memberId, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<DiamondAccountResponse> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAccount(traceId, memberId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAccount(String traceId, 
                                            long memberId, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<DiamondAccountResponse> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAccount(traceId, memberId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getAccount(String traceId, 
                                             long memberId, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<DiamondAccountResponse> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAccount(traceId, memberId, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<RpcAccount.DiamondAccountResponse>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            AccountEndpointPrxHelper.__getAccount_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_getAccount(String traceId, 
                                             long memberId, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAccount_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getAccount_name, __cb);
        try
        {
            __result.prepare(__getAccount_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(traceId);
            __os.writeLong(memberId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public DiamondAccountResponse end_getAccount(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getAccount_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            DiamondAccountResponseHolder __ret = new DiamondAccountResponseHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getAccount_completed(Ice.TwowayCallbackArg1<DiamondAccountResponse> __cb, Ice.AsyncResult __result)
    {
        AccountEndpointPrx __proxy = (AccountEndpointPrx)__result.getProxy();
        DiamondAccountResponse __ret = null;
        try
        {
            __ret = __proxy.end_getAccount(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getChannelList_name = "getChannelList";

    public ChannelListResponse getChannelList(String traceId)
    {
        return getChannelList(traceId, null, false);
    }

    public ChannelListResponse getChannelList(String traceId, java.util.Map<String, String> __ctx)
    {
        return getChannelList(traceId, __ctx, true);
    }

    private ChannelListResponse getChannelList(String traceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getChannelList_name);
        return end_getChannelList(begin_getChannelList(traceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getChannelList(String traceId)
    {
        return begin_getChannelList(traceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_getChannelList(String traceId, java.util.Map<String, String> __ctx)
    {
        return begin_getChannelList(traceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getChannelList(String traceId, Ice.Callback __cb)
    {
        return begin_getChannelList(traceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelList(String traceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getChannelList(traceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelList(String traceId, Callback_AccountEndpoint_getChannelList __cb)
    {
        return begin_getChannelList(traceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelList(String traceId, java.util.Map<String, String> __ctx, Callback_AccountEndpoint_getChannelList __cb)
    {
        return begin_getChannelList(traceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getChannelList(String traceId, 
                                                IceInternal.Functional_GenericCallback1<ChannelListResponse> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getChannelList(traceId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getChannelList(String traceId, 
                                                IceInternal.Functional_GenericCallback1<ChannelListResponse> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getChannelList(traceId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getChannelList(String traceId, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<ChannelListResponse> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getChannelList(traceId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getChannelList(String traceId, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<ChannelListResponse> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getChannelList(traceId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getChannelList(String traceId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<ChannelListResponse> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getChannelList(traceId, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1<RpcAccount.ChannelListResponse>(__responseCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                AccountEndpointPrxHelper.__getChannelList_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_getChannelList(String traceId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getChannelList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getChannelList_name, __cb);
        try
        {
            __result.prepare(__getChannelList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(traceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public ChannelListResponse end_getChannelList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getChannelList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            ChannelListResponseHolder __ret = new ChannelListResponseHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getChannelList_completed(Ice.TwowayCallbackArg1<ChannelListResponse> __cb, Ice.AsyncResult __result)
    {
        AccountEndpointPrx __proxy = (AccountEndpointPrx)__result.getProxy();
        ChannelListResponse __ret = null;
        try
        {
            __ret = __proxy.end_getChannelList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getPriceList_name = "getPriceList";

    public PriceListResponse getPriceList(String traceId)
    {
        return getPriceList(traceId, null, false);
    }

    public PriceListResponse getPriceList(String traceId, java.util.Map<String, String> __ctx)
    {
        return getPriceList(traceId, __ctx, true);
    }

    private PriceListResponse getPriceList(String traceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getPriceList_name);
        return end_getPriceList(begin_getPriceList(traceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getPriceList(String traceId)
    {
        return begin_getPriceList(traceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_getPriceList(String traceId, java.util.Map<String, String> __ctx)
    {
        return begin_getPriceList(traceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getPriceList(String traceId, Ice.Callback __cb)
    {
        return begin_getPriceList(traceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getPriceList(String traceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPriceList(traceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getPriceList(String traceId, Callback_AccountEndpoint_getPriceList __cb)
    {
        return begin_getPriceList(traceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getPriceList(String traceId, java.util.Map<String, String> __ctx, Callback_AccountEndpoint_getPriceList __cb)
    {
        return begin_getPriceList(traceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getPriceList(String traceId, 
                                              IceInternal.Functional_GenericCallback1<PriceListResponse> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getPriceList(traceId, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getPriceList(String traceId, 
                                              IceInternal.Functional_GenericCallback1<PriceListResponse> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getPriceList(traceId, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getPriceList(String traceId, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<PriceListResponse> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getPriceList(traceId, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getPriceList(String traceId, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<PriceListResponse> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getPriceList(traceId, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getPriceList(String traceId, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<PriceListResponse> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getPriceList(traceId, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<RpcAccount.PriceListResponse>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              AccountEndpointPrxHelper.__getPriceList_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_getPriceList(String traceId, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPriceList_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getPriceList_name, __cb);
        try
        {
            __result.prepare(__getPriceList_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(traceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public PriceListResponse end_getPriceList(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getPriceList_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            PriceListResponseHolder __ret = new PriceListResponseHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getPriceList_completed(Ice.TwowayCallbackArg1<PriceListResponse> __cb, Ice.AsyncResult __result)
    {
        AccountEndpointPrx __proxy = (AccountEndpointPrx)__result.getProxy();
        PriceListResponse __ret = null;
        try
        {
            __ret = __proxy.end_getPriceList(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryDepositOrder_name = "queryDepositOrder";

    public DepositResponse queryDepositOrder(String traceId, String paymentVoucherNo)
    {
        return queryDepositOrder(traceId, paymentVoucherNo, null, false);
    }

    public DepositResponse queryDepositOrder(String traceId, String paymentVoucherNo, java.util.Map<String, String> __ctx)
    {
        return queryDepositOrder(traceId, paymentVoucherNo, __ctx, true);
    }

    private DepositResponse queryDepositOrder(String traceId, String paymentVoucherNo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__queryDepositOrder_name);
        return end_queryDepositOrder(begin_queryDepositOrder(traceId, paymentVoucherNo, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, String paymentVoucherNo)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, String paymentVoucherNo, java.util.Map<String, String> __ctx)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, String paymentVoucherNo, Ice.Callback __cb)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, String paymentVoucherNo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, String paymentVoucherNo, Callback_AccountEndpoint_queryDepositOrder __cb)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, String paymentVoucherNo, java.util.Map<String, String> __ctx, Callback_AccountEndpoint_queryDepositOrder __cb)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, 
                                                   String paymentVoucherNo, 
                                                   IceInternal.Functional_GenericCallback1<DepositResponse> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, 
                                                   String paymentVoucherNo, 
                                                   IceInternal.Functional_GenericCallback1<DepositResponse> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, 
                                                   String paymentVoucherNo, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<DepositResponse> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDepositOrder(String traceId, 
                                                   String paymentVoucherNo, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_GenericCallback1<DepositResponse> __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryDepositOrder(String traceId, 
                                                    String paymentVoucherNo, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_GenericCallback1<DepositResponse> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDepositOrder(traceId, paymentVoucherNo, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackArg1<RpcAccount.DepositResponse>(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   AccountEndpointPrxHelper.__queryDepositOrder_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_queryDepositOrder(String traceId, 
                                                    String paymentVoucherNo, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryDepositOrder_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryDepositOrder_name, __cb);
        try
        {
            __result.prepare(__queryDepositOrder_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(traceId);
            __os.writeString(paymentVoucherNo);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public DepositResponse end_queryDepositOrder(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryDepositOrder_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            DepositResponseHolder __ret = new DepositResponseHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryDepositOrder_completed(Ice.TwowayCallbackArg1<DepositResponse> __cb, Ice.AsyncResult __result)
    {
        AccountEndpointPrx __proxy = (AccountEndpointPrx)__result.getProxy();
        DepositResponse __ret = null;
        try
        {
            __ret = __proxy.end_queryDepositOrder(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __settle_name = "settle";

    public AccountBaseResponse settle(String traceId, SettleRequest request)
    {
        return settle(traceId, request, null, false);
    }

    public AccountBaseResponse settle(String traceId, SettleRequest request, java.util.Map<String, String> __ctx)
    {
        return settle(traceId, request, __ctx, true);
    }

    private AccountBaseResponse settle(String traceId, SettleRequest request, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__settle_name);
        return end_settle(begin_settle(traceId, request, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_settle(String traceId, SettleRequest request)
    {
        return begin_settle(traceId, request, null, false, false, null);
    }

    public Ice.AsyncResult begin_settle(String traceId, SettleRequest request, java.util.Map<String, String> __ctx)
    {
        return begin_settle(traceId, request, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_settle(String traceId, SettleRequest request, Ice.Callback __cb)
    {
        return begin_settle(traceId, request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_settle(String traceId, SettleRequest request, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_settle(traceId, request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_settle(String traceId, SettleRequest request, Callback_AccountEndpoint_settle __cb)
    {
        return begin_settle(traceId, request, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_settle(String traceId, SettleRequest request, java.util.Map<String, String> __ctx, Callback_AccountEndpoint_settle __cb)
    {
        return begin_settle(traceId, request, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_settle(String traceId, 
                                        SettleRequest request, 
                                        IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_settle(traceId, request, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_settle(String traceId, 
                                        SettleRequest request, 
                                        IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_settle(traceId, request, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_settle(String traceId, 
                                        SettleRequest request, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_settle(traceId, request, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_settle(String traceId, 
                                        SettleRequest request, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_settle(traceId, request, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_settle(String traceId, 
                                         SettleRequest request, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_GenericCallback1<AccountBaseResponse> __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_settle(traceId, request, __ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackArg1<AccountBaseResponse>(__responseCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        AccountEndpointPrxHelper.__settle_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_settle(String traceId, 
                                         SettleRequest request, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__settle_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__settle_name, __cb);
        try
        {
            __result.prepare(__settle_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(traceId);
            __os.writeObject(request);
            __os.writePendingObjects();
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public AccountBaseResponse end_settle(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __settle_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            AccountBaseResponseHolder __ret = new AccountBaseResponseHolder();
            __is.readObject(__ret);
            __is.readPendingObjects();
            __result.endReadParams();
            return __ret.value;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __settle_completed(Ice.TwowayCallbackArg1<AccountBaseResponse> __cb, Ice.AsyncResult __result)
    {
        AccountEndpointPrx __proxy = (AccountEndpointPrx)__result.getProxy();
        AccountBaseResponse __ret = null;
        try
        {
            __ret = __proxy.end_settle(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static AccountEndpointPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), AccountEndpointPrx.class, AccountEndpointPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static AccountEndpointPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), AccountEndpointPrx.class, AccountEndpointPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static AccountEndpointPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), AccountEndpointPrx.class, AccountEndpointPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static AccountEndpointPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), AccountEndpointPrx.class, AccountEndpointPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static AccountEndpointPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, AccountEndpointPrx.class, AccountEndpointPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static AccountEndpointPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, AccountEndpointPrx.class, AccountEndpointPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::RpcAccount::AccountEndpoint"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, AccountEndpointPrx v)
    {
        __os.writeProxy(v);
    }

    public static AccountEndpointPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            AccountEndpointPrxHelper result = new AccountEndpointPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
